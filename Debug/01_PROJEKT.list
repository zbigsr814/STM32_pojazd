
01_PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b8  080044b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044b8  080044b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044b8  080044b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  080044cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080044cc  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a8d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317c  00000000  00000000  00038ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0003bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003cf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228c4  00000000  00000000  0003e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c4d  00000000  00000000  00060974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdcd2  00000000  00000000  0007a5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  001482e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800444c 	.word	0x0800444c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800444c 	.word	0x0800444c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b08a      	sub	sp, #40	; 0x28
 80001e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001fa:	4b39      	ldr	r3, [pc, #228]	; (80002e0 <MX_GPIO_Init+0xfc>)
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	4a38      	ldr	r2, [pc, #224]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000204:	6153      	str	r3, [r2, #20]
 8000206:	4b36      	ldr	r3, [pc, #216]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800020e:	613b      	str	r3, [r7, #16]
 8000210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000212:	4b33      	ldr	r3, [pc, #204]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	4a32      	ldr	r2, [pc, #200]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800021c:	6153      	str	r3, [r2, #20]
 800021e:	4b30      	ldr	r3, [pc, #192]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b2d      	ldr	r3, [pc, #180]	; (80002e0 <MX_GPIO_Init+0xfc>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b2a      	ldr	r3, [pc, #168]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000242:	4b27      	ldr	r3, [pc, #156]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800024c:	6153      	str	r3, [r2, #20]
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <MX_GPIO_Init+0xfc>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_left_Pin|M0_right_Pin|M1_left_Pin|M2_right_Pin
 800025a:	2200      	movs	r2, #0
 800025c:	f240 3113 	movw	r1, #787	; 0x313
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f001 f99a 	bl	800159c <HAL_GPIO_WritePin>
                          |M2_left_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2110      	movs	r1, #16
 800026c:	481d      	ldr	r0, [pc, #116]	; (80002e4 <MX_GPIO_Init+0x100>)
 800026e:	f001 f995 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_right_Pin|D6_Pin|D7_Pin|M3_left_Pin
 8000272:	2200      	movs	r2, #0
 8000274:	f24e 4117 	movw	r1, #58391	; 0xe417
 8000278:	481b      	ldr	r0, [pc, #108]	; (80002e8 <MX_GPIO_Init+0x104>)
 800027a:	f001 f98f 	bl	800159c <HAL_GPIO_WritePin>
                          |EN_Pin|D4_Pin|D5_Pin|M3_right_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = M0_left_Pin|M0_right_Pin|M1_left_Pin|M2_right_Pin
 800027e:	f240 3313 	movw	r3, #787	; 0x313
 8000282:	617b      	str	r3, [r7, #20]
                          |M2_left_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000284:	2301      	movs	r3, #1
 8000286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000288:	2300      	movs	r3, #0
 800028a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	4619      	mov	r1, r3
 8000296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029a:	f000 fff5 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS_Pin;
 800029e:	2310      	movs	r3, #16
 80002a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	4619      	mov	r1, r3
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <MX_GPIO_Init+0x100>)
 80002b6:	f000 ffe7 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M1_right_Pin|D6_Pin|D7_Pin|M3_left_Pin
 80002ba:	f24e 4317 	movw	r3, #58391	; 0xe417
 80002be:	617b      	str	r3, [r7, #20]
                          |EN_Pin|D4_Pin|D5_Pin|M3_right_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_GPIO_Init+0x104>)
 80002d4:	f000 ffd8 	bl	8001288 <HAL_GPIO_Init>

}
 80002d8:	bf00      	nop
 80002da:	3728      	adds	r7, #40	; 0x28
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	48000800 	.word	0x48000800
 80002e8:	48000400 	.word	0x48000400

080002ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_I2C1_Init+0x74>)
 80002f2:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <MX_I2C1_Init+0x78>)
 80002f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <MX_I2C1_Init+0x74>)
 80002f8:	4a1b      	ldr	r2, [pc, #108]	; (8000368 <MX_I2C1_Init+0x7c>)
 80002fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <MX_I2C1_Init+0x74>)
 8000304:	2201      	movs	r2, #1
 8000306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_I2C1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_I2C1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_I2C1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_I2C1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000326:	480e      	ldr	r0, [pc, #56]	; (8000360 <MX_I2C1_Init+0x74>)
 8000328:	f001 f950 	bl	80015cc <HAL_I2C_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000332:	f000 fa19 	bl	8000768 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000336:	2100      	movs	r1, #0
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <MX_I2C1_Init+0x74>)
 800033a:	f001 f9d6 	bl	80016ea <HAL_I2CEx_ConfigAnalogFilter>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000344:	f000 fa10 	bl	8000768 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000348:	2100      	movs	r1, #0
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_I2C1_Init+0x74>)
 800034c:	f001 fa18 	bl	8001780 <HAL_I2CEx_ConfigDigitalFilter>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000356:	f000 fa07 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000002c 	.word	0x2000002c
 8000364:	40005400 	.word	0x40005400
 8000368:	2000090e 	.word	0x2000090e

0800036c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000374:	f107 0314 	add.w	r3, r7, #20
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a18      	ldr	r2, [pc, #96]	; (80003ec <HAL_I2C_MspInit+0x80>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d129      	bne.n	80003e2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <HAL_I2C_MspInit+0x84>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <HAL_I2C_MspInit+0x84>)
 8000394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <HAL_I2C_MspInit+0x84>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80003a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ac:	2312      	movs	r3, #18
 80003ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b0:	2301      	movs	r3, #1
 80003b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b4:	2303      	movs	r3, #3
 80003b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003b8:	2304      	movs	r3, #4
 80003ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	4619      	mov	r1, r3
 80003c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c6:	f000 ff5f 	bl	8001288 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_I2C_MspInit+0x84>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_I2C_MspInit+0x84>)
 80003d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_I2C_MspInit+0x84>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003e2:	bf00      	nop
 80003e4:	3728      	adds	r7, #40	; 0x28
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40005400 	.word	0x40005400
 80003f0:	40021000 	.word	0x40021000

080003f4 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7d9b      	ldrb	r3, [r3, #22]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d10c      	bne.n	800041e <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000404:	2133      	movs	r1, #51	; 0x33
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 f848 	bl	800049c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800040c:	2132      	movs	r1, #50	; 0x32
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f000 f844 	bl	800049c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000414:	2128      	movs	r1, #40	; 0x28
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f840 	bl	800049c <lcd_write_command>
 800041c:	e003      	b.n	8000426 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800041e:	2138      	movs	r1, #56	; 0x38
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 f83b 	bl	800049c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000426:	2101      	movs	r1, #1
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 f837 	bl	800049c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800042e:	210c      	movs	r1, #12
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 f833 	bl	800049c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000436:	2106      	movs	r1, #6
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 f82f 	bl	800049c <lcd_write_command>
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000446:	b590      	push	{r4, r7, lr}
 8000448:	b085      	sub	sp, #20
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000450:	2300      	movs	r3, #0
 8000452:	73fb      	strb	r3, [r7, #15]
 8000454:	e00a      	b.n	800046c <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	4413      	add	r3, r2
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4619      	mov	r1, r3
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f000 f849 	bl	80004f8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	3301      	adds	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	7bfc      	ldrb	r4, [r7, #15]
 800046e:	6838      	ldr	r0, [r7, #0]
 8000470:	f7ff feb0 	bl	80001d4 <strlen>
 8000474:	4603      	mov	r3, r0
 8000476:	429c      	cmp	r4, r3
 8000478:	d3ed      	bcc.n	8000456 <Lcd_string+0x10>
	}
}
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bd90      	pop	{r4, r7, pc}

08000484 <Lcd_clear>:
}

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800048c:	2101      	movs	r1, #1
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f000 f804 	bl	800049c <lcd_write_command>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6898      	ldr	r0, [r3, #8]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	899b      	ldrh	r3, [r3, #12]
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	f001 f872 	bl	800159c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	7d9b      	ldrb	r3, [r3, #22]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	091b      	lsrs	r3, r3, #4
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2204      	movs	r2, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f842 	bl	8000554 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2204      	movs	r2, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f839 	bl	8000554 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80004e2:	e005      	b.n	80004f0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2208      	movs	r2, #8
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f832 	bl	8000554 <lcd_write>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6898      	ldr	r0, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	899b      	ldrh	r3, [r3, #12]
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	f001 f844 	bl	800159c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7d9b      	ldrb	r3, [r3, #22]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	091b      	lsrs	r3, r3, #4
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2204      	movs	r2, #4
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 f814 	bl	8000554 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2204      	movs	r2, #4
 8000536:	4619      	mov	r1, r3
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 f80b 	bl	8000554 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800053e:	e005      	b.n	800054c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2208      	movs	r2, #8
 8000544:	4619      	mov	r1, r3
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f804 	bl	8000554 <lcd_write>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
 8000560:	4613      	mov	r3, r2
 8000562:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e019      	b.n	800059e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	8819      	ldrh	r1, [r3, #0]
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	fa42 f303 	asr.w	r3, r2, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f001 f802 	bl	800159c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfa      	ldrb	r2, [r7, #15]
 80005a0:	78bb      	ldrb	r3, [r7, #2]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d3e1      	bcc.n	800056a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6918      	ldr	r0, [r3, #16]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	8a9b      	ldrh	r3, [r3, #20]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	f000 fff3 	bl	800159c <HAL_GPIO_WritePin>
	DELAY(1);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fcba 	bl	8000f30 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6918      	ldr	r0, [r3, #16]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	8a9b      	ldrh	r3, [r3, #20]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	f000 ffe8 	bl	800159c <HAL_GPIO_WritePin>
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08d      	sub	sp, #52	; 0x34
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fc43 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f851 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f7ff fdff 	bl	80001e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fb99 	bl	8000d1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ea:	f7ff fe7f 	bl	80002ec <MX_I2C1_Init>
  MX_SPI1_Init();
 80005ee:	f000 fa55 	bl	8000a9c <MX_SPI1_Init>
  MX_TIM16_Init();
 80005f2:	f000 fb47 	bl	8000c84 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  Lcd_HandleTypeDef lcd;
	lcd.en_port = EN_GPIO_Port;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <main+0x9c>)
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
	lcd.en_pin = EN_Pin;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
	lcd.rs_port = RS_GPIO_Port;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <main+0xa0>)
 8000602:	623b      	str	r3, [r7, #32]
	lcd.rs_pin = RS_Pin;
 8000604:	2310      	movs	r3, #16
 8000606:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.mode = LCD_4_BIT_MODE;
 8000608:	2300      	movs	r3, #0
 800060a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	Lcd_PortType lcdPorts[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <main+0xa4>)
 8000610:	f107 0408 	add.w	r4, r7, #8
 8000614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd.data_port = lcdPorts;
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	61bb      	str	r3, [r7, #24]
	Lcd_PinType lcdPins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <main+0xa8>)
 8000622:	463b      	mov	r3, r7
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd.data_pin = lcdPins;
 800062c:	463b      	mov	r3, r7
 800062e:	61fb      	str	r3, [r7, #28]
	Lcd_init(&lcd);
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fedd 	bl	80003f4 <Lcd_init>
	Lcd_clear(&lcd);
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff20 	bl	8000484 <Lcd_clear>
	Lcd_string(&lcd, "abc");
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	490d      	ldr	r1, [pc, #52]	; (8000680 <main+0xac>)
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fefb 	bl	8000446 <Lcd_string>
		  Lcd_string(&lcd, data);
		  przydzielKierunek(data);	//kierunek w postaci znaku char
		  //speed = 50 + data[1] * 2;     //ustalenie wypełnienia syg PWM z zakresu 0-100
	  }*/

	  ruchPojazdu(przod);
 8000650:	2000      	movs	r0, #0
 8000652:	f000 f96d 	bl	8000930 <ruchPojazdu>
	  HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f000 fc69 	bl	8000f30 <HAL_Delay>
	  ruchPojazdu(stop);
 800065e:	2004      	movs	r0, #4
 8000660:	f000 f966 	bl	8000930 <ruchPojazdu>
	  HAL_Delay(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000668:	f000 fc62 	bl	8000f30 <HAL_Delay>
	  ruchPojazdu(przod);
 800066c:	e7f0      	b.n	8000650 <main+0x7c>
 800066e:	bf00      	nop
 8000670:	48000400 	.word	0x48000400
 8000674:	48000800 	.word	0x48000800
 8000678:	08004468 	.word	0x08004468
 800067c:	08004478 	.word	0x08004478
 8000680:	08004464 	.word	0x08004464

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0a6      	sub	sp, #152	; 0x98
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800068e:	2228      	movs	r2, #40	; 0x28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fed2 	bl	800443c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2258      	movs	r2, #88	; 0x58
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fec4 	bl	800443c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f8a3 	bl	8001818 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006d8:	f000 f846 	bl	8000768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 ffa4 	bl	8002644 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000702:	f000 f831 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <SystemClock_Config+0xac>)
 8000708:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000712:	2300      	movs	r3, #0
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f9c9 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000724:	f000 f820 	bl	8000768 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3798      	adds	r7, #152	; 0x98
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	00800022 	.word	0x00800022

08000734 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// przerwanie timera16 OC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
//void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	cnt++;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000746:	801a      	strh	r2, [r3, #0]
	if(cnt == 100) cnt = 0;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b64      	cmp	r3, #100	; 0x64
 800074e:	d102      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x22>
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000752:	2200      	movs	r2, #0
 8000754:	801a      	strh	r2, [r3, #0]

	//if(cnt < speed) przydzielKierunek(data[0]);		//realizacja PWM na timerze16
	//else ruchPojazdu(stop);
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000028 	.word	0x20000028

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>

08000772 <M0_ruch>:


//funkcja sterująca ruchem pojedynczego silnika M0 w zależności od parametru
//parametrem jest enumerator flagMotor
void M0_ruch(flagMotor kierunek)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
	if(kierunek == motorLewo)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10b      	bne.n	800079a <M0_ruch+0x28>
	{
	HAL_GPIO_WritePin(M0_left_GPIO_Port, M0_left_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2101      	movs	r1, #1
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 ff07 	bl	800159c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M0_right_GPIO_Port, M0_right_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 ff01 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorPrawo)
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d10b      	bne.n	80007b8 <M0_ruch+0x46>
	{
		HAL_GPIO_WritePin(M0_right_GPIO_Port, M0_right_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2102      	movs	r1, #2
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f000 fef8 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M0_left_GPIO_Port, M0_left_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f000 fef2 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorStop)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d10b      	bne.n	80007d6 <M0_ruch+0x64>
	{
		HAL_GPIO_WritePin(M0_left_GPIO_Port, M0_left_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2101      	movs	r1, #1
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 fee9 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M0_right_GPIO_Port, M0_right_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d2:	f000 fee3 	bl	800159c <HAL_GPIO_WritePin>
	}
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <M1_ruch>:

//funkcja sterująca ruchem pojedynczego silnika M1 w zależności od parametru
//parametrem jest enumerator flagMotor
void M1_ruch(flagMotor kierunek)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	if(kierunek == motorLewo)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10a      	bne.n	8000806 <M1_ruch+0x26>
	{
	HAL_GPIO_WritePin(M1_left_GPIO_Port, M1_left_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f000 fed0 	bl	800159c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_right_GPIO_Port, M1_right_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2101      	movs	r1, #1
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <M1_ruch+0x68>)
 8000802:	f000 fecb 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorPrawo)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d10a      	bne.n	8000822 <M1_ruch+0x42>
	{
		HAL_GPIO_WritePin(M1_right_GPIO_Port, M1_right_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2101      	movs	r1, #1
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <M1_ruch+0x68>)
 8000812:	f000 fec3 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_left_GPIO_Port, M1_left_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2110      	movs	r1, #16
 800081a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081e:	f000 febd 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorStop)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d10a      	bne.n	800083e <M1_ruch+0x5e>
	{
		HAL_GPIO_WritePin(M1_left_GPIO_Port, M1_left_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2110      	movs	r1, #16
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 feb4 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_right_GPIO_Port, M1_right_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <M1_ruch+0x68>)
 800083a:	f000 feaf 	bl	800159c <HAL_GPIO_WritePin>
	}
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48000400 	.word	0x48000400

0800084c <M2_ruch>:

//funkcja sterująca ruchem pojedynczego silnika M2 w zależności od parametru
//parametrem jest enumerator flagMotor
void M2_ruch(flagMotor kierunek)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	if(kierunek == motorLewo)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10d      	bne.n	8000878 <M2_ruch+0x2c>
	{
	HAL_GPIO_WritePin(M2_left_GPIO_Port, M2_left_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 fe99 	bl	800159c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_right_GPIO_Port, M2_right_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 fe92 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorPrawo)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d10d      	bne.n	800089a <M2_ruch+0x4e>
	{
		HAL_GPIO_WritePin(M2_right_GPIO_Port, M2_right_Pin, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f000 fe88 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_left_GPIO_Port, M2_left_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fe81 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorStop)
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d10d      	bne.n	80008bc <M2_ruch+0x70>
	{
		HAL_GPIO_WritePin(M2_left_GPIO_Port, M2_left_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 fe77 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_right_GPIO_Port, M2_right_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 fe70 	bl	800159c <HAL_GPIO_WritePin>
	}
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <M3_ruch>:

//funkcja sterująca ruchem pojedynczego silnika M3 w zależności od parametru
//parametrem jest enumerator flagMotor
void M3_ruch(flagMotor kierunek)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	if(kierunek == motorLewo)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10a      	bne.n	80008ea <M3_ruch+0x26>
	{
	HAL_GPIO_WritePin(M3_left_GPIO_Port, M3_left_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <M3_ruch+0x68>)
 80008dc:	f000 fe5e 	bl	800159c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M3_right_GPIO_Port, M3_right_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2110      	movs	r1, #16
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <M3_ruch+0x68>)
 80008e6:	f000 fe59 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorPrawo)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d10a      	bne.n	8000906 <M3_ruch+0x42>
	{
		HAL_GPIO_WritePin(M3_right_GPIO_Port, M3_right_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2110      	movs	r1, #16
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <M3_ruch+0x68>)
 80008f6:	f000 fe51 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_left_GPIO_Port, M3_left_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <M3_ruch+0x68>)
 8000902:	f000 fe4b 	bl	800159c <HAL_GPIO_WritePin>
	}
	if(kierunek == motorStop)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d10a      	bne.n	8000922 <M3_ruch+0x5e>
	{
		HAL_GPIO_WritePin(M3_left_GPIO_Port, M3_left_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <M3_ruch+0x68>)
 8000914:	f000 fe42 	bl	800159c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M3_right_GPIO_Port, M3_right_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2110      	movs	r1, #16
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <M3_ruch+0x68>)
 800091e:	f000 fe3d 	bl	800159c <HAL_GPIO_WritePin>
	}
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	48000400 	.word	0x48000400

08000930 <ruchPojazdu>:

//funkcja sterująca ruchem całego pojazdu w zależności od parametru
//parametrem jest enumerator flagMotors
void ruchPojazdu(flagMotors kierunek)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	switch(kierunek)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b0a      	cmp	r3, #10
 800093e:	f200 80a8 	bhi.w	8000a92 <ruchPojazdu+0x162>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <ruchPojazdu+0x18>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000975 	.word	0x08000975
 800094c:	0800098f 	.word	0x0800098f
 8000950:	080009a9 	.word	0x080009a9
 8000954:	080009c3 	.word	0x080009c3
 8000958:	08000a79 	.word	0x08000a79
 800095c:	080009f7 	.word	0x080009f7
 8000960:	080009dd 	.word	0x080009dd
 8000964:	08000a2b 	.word	0x08000a2b
 8000968:	08000a11 	.word	0x08000a11
 800096c:	08000a45 	.word	0x08000a45
 8000970:	08000a5f 	.word	0x08000a5f
	{
	//kierunki podstawowe
	case przod:
		M0_ruch(motorPrawo); M1_ruch(motorPrawo); M2_ruch(motorPrawo); M3_ruch(motorPrawo);
 8000974:	2001      	movs	r0, #1
 8000976:	f7ff fefc 	bl	8000772 <M0_ruch>
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff ff30 	bl	80007e0 <M1_ruch>
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff63 	bl	800084c <M2_ruch>
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff ff9c 	bl	80008c4 <M3_ruch>
		break;
 800098c:	e081      	b.n	8000a92 <ruchPojazdu+0x162>
	case tyl:
		M0_ruch(motorLewo); M1_ruch(motorLewo); M2_ruch(motorLewo); M3_ruch(motorLewo);
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff feef 	bl	8000772 <M0_ruch>
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff23 	bl	80007e0 <M1_ruch>
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff56 	bl	800084c <M2_ruch>
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff ff8f 	bl	80008c4 <M3_ruch>
		break;
 80009a6:	e074      	b.n	8000a92 <ruchPojazdu+0x162>
	case lewo:
		M0_ruch(motorLewo); M1_ruch(motorPrawo); M2_ruch(motorPrawo); M3_ruch(motorLewo);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fee2 	bl	8000772 <M0_ruch>
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff ff16 	bl	80007e0 <M1_ruch>
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff ff49 	bl	800084c <M2_ruch>
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ff82 	bl	80008c4 <M3_ruch>
		break;
 80009c0:	e067      	b.n	8000a92 <ruchPojazdu+0x162>
	case prawo:
		M0_ruch(motorPrawo); M1_ruch(motorLewo); M2_ruch(motorLewo); M3_ruch(motorPrawo);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fed5 	bl	8000772 <M0_ruch>
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff09 	bl	80007e0 <M1_ruch>
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff ff3c 	bl	800084c <M2_ruch>
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff75 	bl	80008c4 <M3_ruch>
		break;
 80009da:	e05a      	b.n	8000a92 <ruchPojazdu+0x162>

	//kierunki po skosie
	case przodPrawo:
		M0_ruch(motorPrawo); M1_ruch(motorStop); M2_ruch(motorStop); M3_ruch(motorPrawo);
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fec8 	bl	8000772 <M0_ruch>
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fefc 	bl	80007e0 <M1_ruch>
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff ff2f 	bl	800084c <M2_ruch>
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff ff68 	bl	80008c4 <M3_ruch>
		break;
 80009f4:	e04d      	b.n	8000a92 <ruchPojazdu+0x162>
	case przodLewo:
		M0_ruch(motorStop); M1_ruch(motorPrawo); M2_ruch(motorPrawo); M3_ruch(motorStop);
 80009f6:	2002      	movs	r0, #2
 80009f8:	f7ff febb 	bl	8000772 <M0_ruch>
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff feef 	bl	80007e0 <M1_ruch>
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff ff22 	bl	800084c <M2_ruch>
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff ff5b 	bl	80008c4 <M3_ruch>
		break;
 8000a0e:	e040      	b.n	8000a92 <ruchPojazdu+0x162>
	case tylPrawo:
		M0_ruch(motorStop); M1_ruch(motorLewo); M2_ruch(motorLewo); M3_ruch(motorStop);
 8000a10:	2002      	movs	r0, #2
 8000a12:	f7ff feae 	bl	8000772 <M0_ruch>
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fee2 	bl	80007e0 <M1_ruch>
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff ff15 	bl	800084c <M2_ruch>
 8000a22:	2002      	movs	r0, #2
 8000a24:	f7ff ff4e 	bl	80008c4 <M3_ruch>
		break;
 8000a28:	e033      	b.n	8000a92 <ruchPojazdu+0x162>
	case tylLewo:
		M0_ruch(motorLewo); M1_ruch(motorPrawo); M2_ruch(motorPrawo); M3_ruch(motorLewo);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fea1 	bl	8000772 <M0_ruch>
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fed5 	bl	80007e0 <M1_ruch>
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff ff08 	bl	800084c <M2_ruch>
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ff41 	bl	80008c4 <M3_ruch>
		break;
 8000a42:	e026      	b.n	8000a92 <ruchPojazdu+0x162>

	//obrót lewo/prawo
	case obrotLewo:
		M0_ruch(motorLewo); M1_ruch(motorPrawo); M2_ruch(motorLewo); M3_ruch(motorPrawo);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fe94 	bl	8000772 <M0_ruch>
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff fec8 	bl	80007e0 <M1_ruch>
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fefb 	bl	800084c <M2_ruch>
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff ff34 	bl	80008c4 <M3_ruch>
		break;
 8000a5c:	e019      	b.n	8000a92 <ruchPojazdu+0x162>
	case obrotPrawo:
		M0_ruch(motorPrawo); M1_ruch(motorLewo); M2_ruch(motorPrawo); M3_ruch(motorLewo);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f7ff fe87 	bl	8000772 <M0_ruch>
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff febb 	bl	80007e0 <M1_ruch>
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff feee 	bl	800084c <M2_ruch>
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ff27 	bl	80008c4 <M3_ruch>
		break;
 8000a76:	e00c      	b.n	8000a92 <ruchPojazdu+0x162>

	//zatrzymanie pojazdu
	case stop:
		M0_ruch(motorStop); M1_ruch(motorStop); M2_ruch(motorStop); M3_ruch(motorStop);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f7ff fe7a 	bl	8000772 <M0_ruch>
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f7ff feae 	bl	80007e0 <M1_ruch>
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff fee1 	bl	800084c <M2_ruch>
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff ff1a 	bl	80008c4 <M3_ruch>
		break;
 8000a90:	bf00      	nop
	}
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop

08000a9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_SPI1_Init+0x78>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000aa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000ab6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000aea:	2207      	movs	r2, #7
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000af6:	2208      	movs	r2, #8
 8000af8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_SPI1_Init+0x74>)
 8000afc:	f002 f9f6 	bl	8002eec <HAL_SPI_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b06:	f7ff fe2f 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000078 	.word	0x20000078
 8000b14:	40013000 	.word	0x40013000

08000b18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_SPI_MspInit+0x7c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d128      	bne.n	8000b8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_SPI_MspInit+0x80>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a16      	ldr	r2, [pc, #88]	; (8000b98 <HAL_SPI_MspInit+0x80>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_SPI_MspInit+0x80>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_SPI_MspInit+0x80>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_SPI_MspInit+0x80>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_SPI_MspInit+0x80>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b6a:	23e0      	movs	r3, #224	; 0xe0
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fb7e 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_MspInit+0x44>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x44>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	61d3      	str	r3, [r2, #28]
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f95e 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c3e:	f002 fa57 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000dc 	.word	0x200000dc

08000c4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <USART2_IRQHandler+0x10>)
 8000c52:	f002 fc9f 	bl	8003594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000128 	.word	0x20000128

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <MX_TIM16_Init+0x48>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000c90:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c94:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 79;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000c9e:	224f      	movs	r2, #79	; 0x4f
 8000ca0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_TIM16_Init+0x44>)
 8000cb6:	f002 f9c4 	bl	8003042 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000cc0:	f7ff fd52 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000dc 	.word	0x200000dc
 8000ccc:	40014400 	.word	0x40014400

08000cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_TIM_Base_MspInit+0x44>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d113      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_TIM_Base_MspInit+0x48>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0x48>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_Base_MspInit+0x48>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 fa15 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d04:	2019      	movs	r0, #25
 8000d06:	f000 fa2e 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40014400 	.word	0x40014400
 8000d18:	40021000 	.word	0x40021000

08000d1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_USART2_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART2_UART_Init+0x58>)
 8000d60:	f002 fbca 	bl	80034f8 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f7ff fcfd 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000128 	.word	0x20000128
 8000d78:	40004400 	.word	0x40004400

08000d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0x8c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d130      	bne.n	8000e00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_UART_MspInit+0x90>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_UART_MspInit+0x90>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_UART_MspInit+0x90>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0x90>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_UART_MspInit+0x90>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_UART_MspInit+0x90>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f000 fa4c 	bl	8001288 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2026      	movs	r0, #38	; 0x26
 8000df6:	f000 f99a 	bl	800112e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dfa:	2026      	movs	r0, #38	; 0x26
 8000dfc:	f000 f9b3 	bl	8001166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40004400 	.word	0x40004400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopForever+0xe>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopForever+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e3a:	f7ff ff11 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f003 fad9 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fbc7 	bl	80005d4 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e54:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 8000e58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e5c:	200001b0 	.word	0x200001b0

08000e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_2_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x28>)
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f94f 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fe8c 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f967 	bl	8001182 <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f92f 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200001ac 	.word	0x200001ac

08000f18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200001ac 	.word	0x200001ac

08000f30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <__NVIC_EnableIRQ+0x38>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff29 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff3e 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff31 	bl	8000fdc <__NVIC_EnableIRQ>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffa2 	bl	80010d4 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d008      	beq.n	80011be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2204      	movs	r2, #4
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e020      	b.n	8001200 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 020e 	bic.w	r2, r2, #14
 80011cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800121e:	2b02      	cmp	r3, #2
 8001220:	d005      	beq.n	800122e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2204      	movs	r2, #4
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e027      	b.n	800127e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 020e 	bic.w	r2, r2, #14
 800123c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	4798      	blx	r3
    } 
  }
  return status;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	e160      	b.n	800155a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8152 	beq.w	8001554 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d005      	beq.n	80012c8 <HAL_GPIO_Init+0x40>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d017      	beq.n	8001366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d123      	bne.n	80013ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	691a      	ldr	r2, [r3, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	6939      	ldr	r1, [r7, #16]
 80013b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0203 	and.w	r2, r3, #3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80ac 	beq.w	8001554 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <HAL_GPIO_Init+0x2f0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001414:	4a59      	ldr	r2, [pc, #356]	; (800157c <HAL_GPIO_Init+0x2f4>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800143e:	d025      	beq.n	800148c <HAL_GPIO_Init+0x204>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4f      	ldr	r2, [pc, #316]	; (8001580 <HAL_GPIO_Init+0x2f8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d01f      	beq.n	8001488 <HAL_GPIO_Init+0x200>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <HAL_GPIO_Init+0x2fc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d019      	beq.n	8001484 <HAL_GPIO_Init+0x1fc>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4d      	ldr	r2, [pc, #308]	; (8001588 <HAL_GPIO_Init+0x300>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <HAL_GPIO_Init+0x1f8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x304>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d00d      	beq.n	800147c <HAL_GPIO_Init+0x1f4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <HAL_GPIO_Init+0x308>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x1f0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <HAL_GPIO_Init+0x30c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_GPIO_Init+0x1ec>
 8001470:	2306      	movs	r3, #6
 8001472:	e00c      	b.n	800148e <HAL_GPIO_Init+0x206>
 8001474:	2307      	movs	r3, #7
 8001476:	e00a      	b.n	800148e <HAL_GPIO_Init+0x206>
 8001478:	2305      	movs	r3, #5
 800147a:	e008      	b.n	800148e <HAL_GPIO_Init+0x206>
 800147c:	2304      	movs	r3, #4
 800147e:	e006      	b.n	800148e <HAL_GPIO_Init+0x206>
 8001480:	2303      	movs	r3, #3
 8001482:	e004      	b.n	800148e <HAL_GPIO_Init+0x206>
 8001484:	2302      	movs	r3, #2
 8001486:	e002      	b.n	800148e <HAL_GPIO_Init+0x206>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_GPIO_Init+0x206>
 800148c:	2300      	movs	r3, #0
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	f002 0203 	and.w	r2, r2, #3
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	4093      	lsls	r3, r2
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800149e:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_GPIO_Init+0x2f4>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <HAL_GPIO_Init+0x310>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014d0:	4a31      	ldr	r2, [pc, #196]	; (8001598 <HAL_GPIO_Init+0x310>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_GPIO_Init+0x310>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014fa:	4a27      	ldr	r2, [pc, #156]	; (8001598 <HAL_GPIO_Init+0x310>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_GPIO_Init+0x310>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001524:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <HAL_GPIO_Init+0x310>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_GPIO_Init+0x310>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <HAL_GPIO_Init+0x310>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	f47f ae97 	bne.w	8001298 <HAL_GPIO_Init+0x10>
  }
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000
 8001580:	48000400 	.word	0x48000400
 8001584:	48000800 	.word	0x48000800
 8001588:	48000c00 	.word	0x48000c00
 800158c:	48001000 	.word	0x48001000
 8001590:	48001400 	.word	0x48001400
 8001594:	48001800 	.word	0x48001800
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e081      	b.n	80016e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7fe feba 	bl	800036c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2224      	movs	r2, #36	; 0x24
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800161c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800162c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	e006      	b.n	8001654 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001652:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d104      	bne.n	8001666 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001664:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69d9      	ldr	r1, [r3, #28]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d138      	bne.n	8001772 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800170a:	2302      	movs	r3, #2
 800170c:	e032      	b.n	8001774 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2224      	movs	r2, #36	; 0x24
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800173c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001772:	2302      	movs	r3, #2
  }
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b20      	cmp	r3, #32
 8001794:	d139      	bne.n	800180a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e033      	b.n	800180c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800181e:	af00      	add	r7, sp, #0
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f000 bf01 	b.w	8002634 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8160 	beq.w	8001b02 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001842:	4bae      	ldr	r3, [pc, #696]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b04      	cmp	r3, #4
 800184c:	d00c      	beq.n	8001868 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800184e:	4bab      	ldr	r3, [pc, #684]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d159      	bne.n	800190e <HAL_RCC_OscConfig+0xf6>
 800185a:	4ba8      	ldr	r3, [pc, #672]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d152      	bne.n	800190e <HAL_RCC_OscConfig+0xf6>
 8001868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800187c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x82>
 8001894:	4b99      	ldr	r3, [pc, #612]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0xae>
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80018ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018c2:	4b8e      	ldr	r3, [pc, #568]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ca:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80018ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80018d2:	fa92 f2a2 	rbit	r2, r2
 80018d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80018da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	f002 021f 	and.w	r2, r2, #31
 80018ee:	2101      	movs	r1, #1
 80018f0:	fa01 f202 	lsl.w	r2, r1, r2
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8102 	beq.w	8001b00 <HAL_RCC_OscConfig+0x2e8>
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 80fc 	bne.w	8001b00 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	f000 be93 	b.w	8002634 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x110>
 800191a:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e030      	b.n	800198a <HAL_RCC_OscConfig+0x172>
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x134>
 8001932:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a71      	ldr	r2, [pc, #452]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6e      	ldr	r2, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01e      	b.n	800198a <HAL_RCC_OscConfig+0x172>
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x15a>
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a67      	ldr	r2, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 800195e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b65      	ldr	r3, [pc, #404]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a64      	ldr	r2, [pc, #400]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0x172>
 8001972:	4b62      	ldr	r3, [pc, #392]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a61      	ldr	r2, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5e      	ldr	r2, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d059      	beq.n	8001a48 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fac0 	bl	8000f18 <HAL_GetTick>
 8001998:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199e:	f7ff fabb 	bl	8000f18 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d902      	bls.n	80019b4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f000 be40 	b.w	8002634 <HAL_RCC_OscConfig+0xe1c>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80019c8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_OscConfig+0x1ce>
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x1fa>
 80019e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80019fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a16:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001a1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001a26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ab      	beq.n	800199e <HAL_RCC_OscConfig+0x186>
 8001a46:	e05c      	b.n	8001b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fa66 	bl	8000f18 <HAL_GetTick>
 8001a4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff fa61 	bl	8000f18 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d902      	bls.n	8001a68 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f000 bde6 	b.w	8002634 <HAL_RCC_OscConfig+0xe1c>
 8001a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d102      	bne.n	8001a9a <HAL_RCC_OscConfig+0x282>
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2ae>
 8001a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ab6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x2e4>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001ace:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001ada:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0220 	orr.w	r2, r2, #32
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ab      	bne.n	8001a52 <HAL_RCC_OscConfig+0x23a>
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_OscConfig+0x2ea>
 8001afc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 8170 	beq.w	8001df2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b12:	4bd0      	ldr	r3, [pc, #832]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b1e:	4bcd      	ldr	r3, [pc, #820]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d16d      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3ee>
 8001b2a:	4bca      	ldr	r3, [pc, #808]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b36:	d166      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3ee>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001b4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_OscConfig+0x350>
 8001b62:	4bbc      	ldr	r3, [pc, #752]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e013      	b.n	8001b90 <HAL_RCC_OscConfig+0x378>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b80:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b8c:	4bb1      	ldr	r3, [pc, #708]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2202      	movs	r2, #2
 8001b92:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b96:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b9a:	fa92 f2a2 	rbit	r2, r2
 8001b9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001ba2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ba6:	fab2 f282 	clz	r2, r2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f042 0220 	orr.w	r2, r2, #32
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f002 021f 	and.w	r2, r2, #31
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3ba>
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d002      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f000 bd31 	b.w	8002634 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	21f8      	movs	r1, #248	; 0xf8
 8001be2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001bea:	fa91 f1a1 	rbit	r1, r1
 8001bee:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001bf2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001bf6:	fab1 f181 	clz	r1, r1
 8001bfa:	b2c9      	uxtb	r1, r1
 8001bfc:	408b      	lsls	r3, r1
 8001bfe:	4995      	ldr	r1, [pc, #596]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c04:	e0f5      	b.n	8001df2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8085 	beq.w	8001d1c <HAL_RCC_OscConfig+0x504>
 8001c12:	2301      	movs	r3, #1
 8001c14:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001c24:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f96b 	bl	8000f18 <HAL_GetTick>
 8001c42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f966 	bl	8000f18 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d902      	bls.n	8001c5e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	f000 bceb 	b.w	8002634 <HAL_RCC_OscConfig+0xe1c>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c70:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_OscConfig+0x476>
 8001c88:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	e013      	b.n	8001cb6 <HAL_RCC_OscConfig+0x49e>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ca6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cb2:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001cbc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001cc8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0af      	beq.n	8001c48 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	21f8      	movs	r1, #248	; 0xf8
 8001cf8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001d00:	fa91 f1a1 	rbit	r1, r1
 8001d04:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001d08:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d0c:	fab1 f181 	clz	r1, r1
 8001d10:	b2c9      	uxtb	r1, r1
 8001d12:	408b      	lsls	r3, r1
 8001d14:	494f      	ldr	r1, [pc, #316]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
 8001d1a:	e06a      	b.n	8001df2 <HAL_RCC_OscConfig+0x5da>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001d2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f8e6 	bl	8000f18 <HAL_GetTick>
 8001d4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff f8e1 	bl	8000f18 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d902      	bls.n	8001d68 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	f000 bc66 	b.w	8002634 <HAL_RCC_OscConfig+0xe1c>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_RCC_OscConfig+0x580>
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e013      	b.n	8001dc0 <HAL_RCC_OscConfig+0x5a8>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001daa:	2302      	movs	r3, #2
 8001dac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001db0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HAL_RCC_OscConfig+0x63c>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001dc6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001dca:	fa92 f2a2 	rbit	r2, r2
 8001dce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001dd2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f042 0220 	orr.w	r2, r2, #32
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f002 021f 	and.w	r2, r2, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1af      	bne.n	8001d52 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80da 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d069      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x6c8>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001e1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x640>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	2301      	movs	r3, #1
 8001e34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f86f 	bl	8000f18 <HAL_GetTick>
 8001e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e00d      	b.n	8001e5c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff f86a 	bl	8000f18 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d905      	bls.n	8001e5c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e3ef      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	10908120 	.word	0x10908120
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e74:	2202      	movs	r2, #2
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea0:	4ba4      	ldr	r3, [pc, #656]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8001ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	6019      	str	r1, [r3, #0]
 8001eac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	fa93 f1a3 	rbit	r1, r3
 8001eb6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001eba:	6019      	str	r1, [r3, #0]
  return result;
 8001ebc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0b0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x628>
 8001ede:	e06a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x79e>
 8001ee0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ef6:	601a      	str	r2, [r3, #0]
  return result;
 8001ef8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001efc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <HAL_RCC_OscConfig+0x920>)
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2300      	movs	r3, #0
 8001f10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff f801 	bl	8000f18 <HAL_GetTick>
 8001f16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fffc 	bl	8000f18 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e381      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
 8001f30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f34:	2202      	movs	r2, #2
 8001f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	fa93 f2a3 	rbit	r2, r3
 8001f5a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f64:	2202      	movs	r2, #2
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b6e      	ldr	r3, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f80:	2102      	movs	r1, #2
 8001f82:	6019      	str	r1, [r3, #0]
 8001f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	fa93 f1a3 	rbit	r1, r3
 8001f8e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f92:	6019      	str	r1, [r3, #0]
  return result;
 8001f94:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1b2      	bne.n	8001f1c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8157 	beq.w	8002274 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d112      	bne.n	8001ffe <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4a55      	ldr	r2, [pc, #340]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	61d3      	str	r3, [r2, #28]
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	4b4f      	ldr	r3, [pc, #316]	; (800213c <HAL_RCC_OscConfig+0x924>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d11a      	bne.n	8002040 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200a:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x924>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_RCC_OscConfig+0x924>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7fe ff7f 	bl	8000f18 <HAL_GetTick>
 800201a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	e009      	b.n	8002034 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe ff7a 	bl	8000f18 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e2ff      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_OscConfig+0x924>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ef      	beq.n	8002020 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x840>
 800204a:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a39      	ldr	r2, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	e02f      	b.n	80020b8 <HAL_RCC_OscConfig+0x8a0>
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x864>
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a30      	ldr	r2, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0x8a0>
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x888>
 8002086:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6213      	str	r3, [r2, #32]
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x8a0>
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06a      	beq.n	8002198 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe ff29 	bl	8000f18 <HAL_GetTick>
 80020c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7fe ff24 	bl	8000f18 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e2a7      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
 80020e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020e8:	2202      	movs	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002112:	601a      	str	r2, [r3, #0]
  return result;
 8002114:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002118:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d108      	bne.n	8002140 <HAL_RCC_OscConfig+0x928>
 800212e:	4b01      	ldr	r3, [pc, #4]	; (8002134 <HAL_RCC_OscConfig+0x91c>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	e013      	b.n	800215c <HAL_RCC_OscConfig+0x944>
 8002134:	40021000 	.word	0x40021000
 8002138:	10908120 	.word	0x10908120
 800213c:	40007000 	.word	0x40007000
 8002140:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4bc0      	ldr	r3, [pc, #768]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002160:	2102      	movs	r1, #2
 8002162:	6011      	str	r1, [r2, #0]
 8002164:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	fa92 f1a2 	rbit	r1, r2
 800216e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002172:	6011      	str	r1, [r2, #0]
  return result;
 8002174:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d09a      	beq.n	80020cc <HAL_RCC_OscConfig+0x8b4>
 8002196:	e063      	b.n	8002260 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe febe 	bl	8000f18 <HAL_GetTick>
 800219c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe feb9 	bl	8000f18 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e23c      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
 80021ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0x9f2>
 8002204:	4b95      	ldr	r3, [pc, #596]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	e00d      	b.n	8002226 <HAL_RCC_OscConfig+0xa0e>
 800220a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	4b8e      	ldr	r3, [pc, #568]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800222a:	2102      	movs	r1, #2
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fa92 f1a2 	rbit	r1, r2
 8002238:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800223c:	6011      	str	r1, [r2, #0]
  return result;
 800223e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1a0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002260:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b7c      	ldr	r3, [pc, #496]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4a7b      	ldr	r2, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 81d9 	beq.w	8002632 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b76      	ldr	r3, [pc, #472]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	f000 81a6 	beq.w	80025da <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b02      	cmp	r3, #2
 8002296:	f040 811e 	bne.w	80024d6 <HAL_RCC_OscConfig+0xcbe>
 800229a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800229e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	fa93 f2a3 	rbit	r2, r3
 80022ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	461a      	mov	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fe22 	bl	8000f18 <HAL_GetTick>
 80022d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe fe1d 	bl	8000f18 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1a2      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
 80022ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002306:	601a      	str	r2, [r3, #0]
  return result;
 8002308:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800230c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_RCC_OscConfig+0xb10>
 8002322:	4b4e      	ldr	r3, [pc, #312]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0xb48>
 8002328:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800232c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002364:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002368:	6011      	str	r1, [r2, #0]
 800236a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	fa92 f1a2 	rbit	r1, r2
 8002374:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002378:	6011      	str	r1, [r2, #0]
  return result;
 800237a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	fab2 f282 	clz	r2, r2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f042 0220 	orr.w	r2, r2, #32
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f002 021f 	and.w	r2, r2, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d19e      	bne.n	80022da <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	4b2f      	ldr	r3, [pc, #188]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f023 020f 	bic.w	r2, r3, #15
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	492c      	ldr	r1, [pc, #176]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6a19      	ldr	r1, [r3, #32]
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023ea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2301      	movs	r3, #1
 8002400:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe fd89 	bl	8000f18 <HAL_GetTick>
 8002406:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240a:	e009      	b.n	8002420 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fd84 	bl	8000f18 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e109      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
 8002420:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002438:	601a      	str	r2, [r3, #0]
  return result;
 800243a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800243e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0xc48>
 8002454:	4b01      	ldr	r3, [pc, #4]	; (800245c <HAL_RCC_OscConfig+0xc44>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e01e      	b.n	8002498 <HAL_RCC_OscConfig+0xc80>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800247e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0xe28>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800249c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fa92 f1a2 	rbit	r1, r2
 80024ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024b0:	6011      	str	r1, [r2, #0]
  return result;
 80024b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d09b      	beq.n	800240c <HAL_RCC_OscConfig+0xbf4>
 80024d4:	e0ad      	b.n	8002632 <HAL_RCC_OscConfig+0xe1a>
 80024d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	461a      	mov	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fd04 	bl	8000f18 <HAL_GetTick>
 8002510:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	e009      	b.n	800252a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fcff 	bl	8000f18 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e084      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
 800252a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002542:	601a      	str	r2, [r3, #0]
  return result;
 8002544:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002548:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_RCC_OscConfig+0xd4c>
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCC_OscConfig+0xe28>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e01b      	b.n	800259c <HAL_RCC_OscConfig+0xd84>
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f107 0320 	add.w	r3, r7, #32
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f2a3 	rbit	r2, r3
 8002592:	f107 0318 	add.w	r3, r7, #24
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCC_OscConfig+0xe28>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f107 0214 	add.w	r2, r7, #20
 80025a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025a4:	6011      	str	r1, [r2, #0]
 80025a6:	f107 0214 	add.w	r2, r7, #20
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	fa92 f1a2 	rbit	r1, r2
 80025b0:	f107 0210 	add.w	r2, r7, #16
 80025b4:	6011      	str	r1, [r2, #0]
  return result;
 80025b6:	f107 0210 	add.w	r2, r7, #16
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fab2 f282 	clz	r2, r2
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f002 021f 	and.w	r2, r2, #31
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f202 	lsl.w	r2, r1, r2
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d19e      	bne.n	8002516 <HAL_RCC_OscConfig+0xcfe>
 80025d8:	e02b      	b.n	8002632 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e025      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0xe28>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_RCC_OscConfig+0xe28>)
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025fc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	429a      	cmp	r2, r3
 8002608:	d111      	bne.n	800262e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800260a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800260e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002618:	429a      	cmp	r2, r3
 800261a:	d108      	bne.n	800262e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800261c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b09e      	sub	sp, #120	; 0x78
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e162      	b.n	8002922 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b90      	ldr	r3, [pc, #576]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b8d      	ldr	r3, [pc, #564]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 0207 	bic.w	r2, r3, #7
 8002672:	498b      	ldr	r1, [pc, #556]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b89      	ldr	r3, [pc, #548]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e14a      	b.n	8002922 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b82      	ldr	r3, [pc, #520]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	497f      	ldr	r1, [pc, #508]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80dc 	beq.w	8002870 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d13c      	bne.n	800273a <HAL_RCC_ClockConfig+0xf6>
 80026c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_ClockConfig+0xa6>
 80026e4:	4b6f      	ldr	r3, [pc, #444]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	e00f      	b.n	800270a <HAL_RCC_ClockConfig+0xc6>
 80026ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	667b      	str	r3, [r7, #100]	; 0x64
 80026f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fc:	663b      	str	r3, [r7, #96]	; 0x60
 80026fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002706:	4b67      	ldr	r3, [pc, #412]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800270e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002712:	fa92 f2a2 	rbit	r2, r2
 8002716:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002718:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0220 	orr.w	r2, r2, #32
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d17b      	bne.n	800282e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0f3      	b.n	8002922 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d13c      	bne.n	80027bc <HAL_RCC_ClockConfig+0x178>
 8002742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002746:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d102      	bne.n	800276c <HAL_RCC_ClockConfig+0x128>
 8002766:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	e00f      	b.n	800278c <HAL_RCC_ClockConfig+0x148>
 800276c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002770:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
 800277a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277e:	643b      	str	r3, [r7, #64]	; 0x40
 8002780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002790:	63ba      	str	r2, [r7, #56]	; 0x38
 8002792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002794:	fa92 f2a2 	rbit	r2, r2
 8002798:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800279a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279c:	fab2 f282 	clz	r2, r2
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f042 0220 	orr.w	r2, r2, #32
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f002 021f 	and.w	r2, r2, #31
 80027ac:	2101      	movs	r1, #1
 80027ae:	fa01 f202 	lsl.w	r2, r1, r2
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d13a      	bne.n	800282e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0b2      	b.n	8002922 <HAL_RCC_ClockConfig+0x2de>
 80027bc:	2302      	movs	r3, #2
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d102      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1a0>
 80027de:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e00d      	b.n	8002800 <HAL_RCC_ClockConfig+0x1bc>
 80027e4:	2302      	movs	r3, #2
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
 80027f0:	2302      	movs	r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2202      	movs	r2, #2
 8002802:	61ba      	str	r2, [r7, #24]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	fa92 f2a2 	rbit	r2, r2
 800280a:	617a      	str	r2, [r7, #20]
  return result;
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0220 	orr.w	r2, r2, #32
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e079      	b.n	8002922 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	491a      	ldr	r1, [pc, #104]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002840:	f7fe fb6a 	bl	8000f18 <HAL_GetTick>
 8002844:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fb66 	bl	8000f18 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e061      	b.n	8002922 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_RCC_ClockConfig+0x260>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 020c 	and.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d1eb      	bne.n	8002848 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d214      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4906      	ldr	r1, [pc, #24]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_RCC_ClockConfig+0x25c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e040      	b.n	8002922 <HAL_RCC_ClockConfig+0x2de>
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCC_ClockConfig+0x2e8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	491a      	ldr	r1, [pc, #104]	; (800292c <HAL_RCC_ClockConfig+0x2e8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_RCC_ClockConfig+0x2e8>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4912      	ldr	r1, [pc, #72]	; (800292c <HAL_RCC_ClockConfig+0x2e8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028e6:	f000 f829 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028ea:	4601      	mov	r1, r0
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_RCC_ClockConfig+0x2e8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f4:	22f0      	movs	r2, #240	; 0xf0
 80028f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	fa92 f2a2 	rbit	r2, r2
 80028fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	fab2 f282 	clz	r2, r2
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	40d3      	lsrs	r3, r2
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x2ec>)
 800290c:	5cd3      	ldrb	r3, [r2, r3]
 800290e:	fa21 f303 	lsr.w	r3, r1, r3
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_RCC_ClockConfig+0x2f0>)
 8002914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCC_ClockConfig+0x2f4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fab8 	bl	8000e90 <HAL_InitTick>
  
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3778      	adds	r7, #120	; 0x78
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	08004480 	.word	0x08004480
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b08b      	sub	sp, #44	; 0x2c
 8002940:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x30>
 8002966:	2b08      	cmp	r3, #8
 8002968:	d003      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x36>
 800296a:	e03f      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xc8>)
 800296e:	623b      	str	r3, [r7, #32]
      break;
 8002970:	e03f      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002978:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800297c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	fa92 f2a2 	rbit	r2, r2
 8002984:	607a      	str	r2, [r7, #4]
  return result;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	40d3      	lsrs	r3, r2
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	220f      	movs	r2, #15
 80029a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	fa92 f2a2 	rbit	r2, r2
 80029a8:	60fa      	str	r2, [r7, #12]
  return result;
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	fab2 f282 	clz	r2, r2
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	40d3      	lsrs	r3, r2
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029c4:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e007      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fbb2 f2f3 	udiv	r2, r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	623b      	str	r3, [r7, #32]
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ee:	623b      	str	r3, [r7, #32]
      break;
 80029f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f2:	6a3b      	ldr	r3, [r7, #32]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	372c      	adds	r7, #44	; 0x2c
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40021000 	.word	0x40021000
 8002a04:	007a1200 	.word	0x007a1200
 8002a08:	08004498 	.word	0x08004498
 8002a0c:	080044a8 	.word	0x080044a8

08002a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000

08002a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a2e:	f7ff ffef 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a32:	4601      	mov	r1, r0
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	fa92 f2a2 	rbit	r2, r2
 8002a48:	603a      	str	r2, [r7, #0]
  return result;
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	fab2 f282 	clz	r2, r2
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	40d3      	lsrs	r3, r2
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000
 8002a68:	08004490 	.word	0x08004490

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a72:	f7ff ffcd 	bl	8002a10 <HAL_RCC_GetHCLKFreq>
 8002a76:	4601      	mov	r1, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	fa92 f2a2 	rbit	r2, r2
 8002a8c:	603a      	str	r2, [r7, #0]
  return result;
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	40d3      	lsrs	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08004490 	.word	0x08004490

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b092      	sub	sp, #72	; 0x48
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80d4 	beq.w	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad4:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10e      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aea:	61d3      	str	r3, [r2, #28]
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b45      	ldr	r3, [pc, #276]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a41      	ldr	r2, [pc, #260]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7fe f9ff 	bl	8000f18 <HAL_GetTick>
 8002b1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe f9fb 	bl	8000f18 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e1d6      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b3c:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8084 	beq.w	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d07c      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	2301      	movs	r3, #1
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2300      	movs	r3, #0
 8002bac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04b      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe f9ab 	bl	8000f18 <HAL_GetTick>
 8002bc2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe f9a7 	bl	8000f18 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e180      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	61fb      	str	r3, [r7, #28]
  return result;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d108      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002c0a:	4b01      	ldr	r3, [pc, #4]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	e00d      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
 8002c18:	10908100 	.word	0x10908100
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	4ba0      	ldr	r3, [pc, #640]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	613a      	str	r2, [r7, #16]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	fa92 f2a2 	rbit	r2, r2
 8002c36:	60fa      	str	r2, [r7, #12]
  return result;
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	fab2 f282 	clz	r2, r2
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f002 021f 	and.w	r2, r2, #31
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0b7      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c56:	4b95      	ldr	r3, [pc, #596]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4992      	ldr	r1, [pc, #584]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4a8d      	ldr	r2, [pc, #564]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c88:	4b88      	ldr	r3, [pc, #544]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f023 0203 	bic.w	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4985      	ldr	r1, [pc, #532]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ca6:	4b81      	ldr	r3, [pc, #516]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	497e      	ldr	r1, [pc, #504]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cc4:	4b79      	ldr	r3, [pc, #484]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4976      	ldr	r1, [pc, #472]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ce2:	4b72      	ldr	r3, [pc, #456]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	496f      	ldr	r1, [pc, #444]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	4967      	ldr	r1, [pc, #412]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f023 0220 	bic.w	r2, r3, #32
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4960      	ldr	r1, [pc, #384]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	4958      	ldr	r1, [pc, #352]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d5a:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4951      	ldr	r1, [pc, #324]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d78:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4949      	ldr	r1, [pc, #292]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d96:	4b45      	ldr	r3, [pc, #276]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4942      	ldr	r1, [pc, #264]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002db4:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	493a      	ldr	r1, [pc, #232]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002dd2:	4b36      	ldr	r3, [pc, #216]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	4933      	ldr	r1, [pc, #204]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002df0:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	492b      	ldr	r1, [pc, #172]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e0e:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4924      	ldr	r1, [pc, #144]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	491c      	ldr	r1, [pc, #112]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	4915      	ldr	r1, [pc, #84]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	490d      	ldr	r1, [pc, #52]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	4906      	ldr	r1, [pc, #24]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00c      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ea4:	4b01      	ldr	r3, [pc, #4]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb8:	490b      	ldr	r1, [pc, #44]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3748      	adds	r7, #72	; 0x48
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e09d      	b.n	800303a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d108      	bne.n	8002f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f0e:	d009      	beq.n	8002f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
 8002f16:	e005      	b.n	8002f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fdea 	bl	8000b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f64:	d902      	bls.n	8002f6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e002      	b.n	8002f72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f7a:	d007      	beq.n	8002f8c <HAL_SPI_Init+0xa0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	f003 0204 	and.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003008:	ea42 0103 	orr.w	r1, r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e049      	b.n	80030e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd fe31 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f000 f97d 	bl	8003380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0202 	mvn.w	r2, #2
 800311c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f905 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8f7 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f908 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0204 	mvn.w	r2, #4
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8db 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8cd 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8de 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0208 	mvn.w	r2, #8
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2204      	movs	r2, #4
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8b1 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8a3 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8b4 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0210 	mvn.w	r2, #16
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2208      	movs	r2, #8
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f887 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f879 	bl	800332e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f88a 	bl	8003356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10e      	bne.n	8003274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0201 	mvn.w	r2, #1
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fa60 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b80      	cmp	r3, #128	; 0x80
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f918 	bl	80034d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ae:	d10e      	bne.n	80032ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d107      	bne.n	80032ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f90b 	bl	80034e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d10e      	bne.n	80032fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f838 	bl	800336a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d10e      	bne.n	8003326 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b20      	cmp	r3, #32
 8003314:	d107      	bne.n	8003326 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f06f 0220 	mvn.w	r2, #32
 800331e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f8cb 	bl	80034bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a42      	ldr	r2, [pc, #264]	; (800349c <TIM_Base_SetConfig+0x11c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d00f      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <TIM_Base_SetConfig+0x120>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3e      	ldr	r2, [pc, #248]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3d      	ldr	r2, [pc, #244]	; (80034a8 <TIM_Base_SetConfig+0x128>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3c      	ldr	r2, [pc, #240]	; (80034ac <TIM_Base_SetConfig+0x12c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d108      	bne.n	80033d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <TIM_Base_SetConfig+0x11c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01f      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d01b      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <TIM_Base_SetConfig+0x120>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d017      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <TIM_Base_SetConfig+0x128>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00f      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <TIM_Base_SetConfig+0x130>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00b      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <TIM_Base_SetConfig+0x134>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <TIM_Base_SetConfig+0x138>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_Base_SetConfig+0x9a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <TIM_Base_SetConfig+0x12c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d108      	bne.n	800342c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <TIM_Base_SetConfig+0x11c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <TIM_Base_SetConfig+0x100>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <TIM_Base_SetConfig+0x128>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00f      	beq.n	8003480 <TIM_Base_SetConfig+0x100>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <TIM_Base_SetConfig+0x130>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00b      	beq.n	8003480 <TIM_Base_SetConfig+0x100>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <TIM_Base_SetConfig+0x134>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <TIM_Base_SetConfig+0x100>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <TIM_Base_SetConfig+0x138>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_Base_SetConfig+0x100>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <TIM_Base_SetConfig+0x12c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d103      	bne.n	8003488 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	615a      	str	r2, [r3, #20]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40013400 	.word	0x40013400
 80034ac:	40015000 	.word	0x40015000
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800

080034bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e040      	b.n	800358c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fc2e 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fb2a 	bl	8003b90 <UART_SetConfig>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e022      	b.n	800358c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fcf4 	bl	8003f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fd7b 	bl	8004080 <UART_CheckIdleState>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b0ba      	sub	sp, #232	; 0xe8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035be:	f640 030f 	movw	r3, #2063	; 0x80f
 80035c2:	4013      	ands	r3, r2
 80035c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d115      	bne.n	80035fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00f      	beq.n	80035fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 82a3 	beq.w	8003b38 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
      }
      return;
 80035fa:	e29d      	b.n	8003b38 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8117 	beq.w	8003834 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003612:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003616:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_UART_IRQHandler+0x298>)
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 810a 	beq.w	8003834 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d011      	beq.n	8003650 <HAL_UART_IRQHandler+0xbc>
 800362c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d011      	beq.n	8003680 <HAL_UART_IRQHandler+0xec>
 800365c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2202      	movs	r2, #2
 800366e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003676:	f043 0204 	orr.w	r2, r3, #4
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d011      	beq.n	80036b0 <HAL_UART_IRQHandler+0x11c>
 800368c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2204      	movs	r2, #4
 800369e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a6:	f043 0202 	orr.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d017      	beq.n	80036ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2208      	movs	r2, #8
 80036da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d012      	beq.n	800371e <HAL_UART_IRQHandler+0x18a>
 80036f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8209 	beq.w	8003b3c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800376a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800376e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04f      	beq.n	8003816 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fd8f 	bl	800429a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d141      	bne.n	800380e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3308      	adds	r3, #8
 8003790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1d9      	bne.n	800378a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d013      	beq.n	8003806 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_UART_IRQHandler+0x29c>)
 80037e4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fd0e 	bl	800120c <HAL_DMA_Abort_IT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d017      	beq.n	8003826 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003800:	4610      	mov	r0, r2
 8003802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00f      	b.n	8003826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9ac 	bl	8003b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e00b      	b.n	8003826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9a8 	bl	8003b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003814:	e007      	b.n	8003826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9a4 	bl	8003b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003824:	e18a      	b.n	8003b3c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003826:	bf00      	nop
    return;
 8003828:	e188      	b.n	8003b3c <HAL_UART_IRQHandler+0x5a8>
 800382a:	bf00      	nop
 800382c:	04000120 	.word	0x04000120
 8003830:	08004361 	.word	0x08004361

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 8143 	bne.w	8003ac4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 813c 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8135 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2210      	movs	r2, #16
 8003860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	f040 80b1 	bne.w	80039d4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800387e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 815c 	beq.w	8003b40 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800388e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003892:	429a      	cmp	r2, r3
 8003894:	f080 8154 	bcs.w	8003b40 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800389e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	f000 8085 	beq.w	80039b8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1da      	bne.n	80038ae <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3308      	adds	r3, #8
 80038fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003908:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3308      	adds	r3, #8
 8003918:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800391c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003920:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003924:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800392e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e1      	bne.n	80038f8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003958:	66fa      	str	r2, [r7, #108]	; 0x6c
 800395a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800395e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e3      	bne.n	8003934 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003988:	f023 0310 	bic.w	r3, r3, #16
 800398c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800399a:	65bb      	str	r3, [r7, #88]	; 0x58
 800399c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e4      	bne.n	8003978 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fbf1 	bl	800119a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8d3 	bl	8003b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039d2:	e0b5      	b.n	8003b40 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a7 	beq.w	8003b44 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80039f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a2 	beq.w	8003b44 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
 8003a24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e4      	bne.n	8003a00 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	623b      	str	r3, [r7, #32]
   return(result);
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3308      	adds	r3, #8
 8003a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f023 0310 	bic.w	r3, r3, #16
 8003a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	69b9      	ldr	r1, [r7, #24]
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e4      	bne.n	8003a80 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f85b 	bl	8003b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ac2:	e03f      	b.n	8003b44 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <HAL_UART_IRQHandler+0x55a>
 8003ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fc7a 	bl	80043e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aec:	e02d      	b.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01c      	beq.n	8003b48 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
    }
    return;
 8003b16:	e017      	b.n	8003b48 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d012      	beq.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
 8003b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00c      	beq.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fc2b 	bl	800438c <UART_EndTransmit_IT>
    return;
 8003b36:	e008      	b.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b38:	bf00      	nop
 8003b3a:	e006      	b.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b3c:	bf00      	nop
 8003b3e:	e004      	b.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003b48:	bf00      	nop
  }

}
 8003b4a:	37e8      	adds	r7, #232	; 0xe8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4bab      	ldr	r3, [pc, #684]	; (8003e68 <UART_SetConfig+0x2d8>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	6979      	ldr	r1, [r7, #20]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a99      	ldr	r2, [pc, #612]	; (8003e6c <UART_SetConfig+0x2dc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d120      	bne.n	8003c4e <UART_SetConfig+0xbe>
 8003c0c:	4b98      	ldr	r3, [pc, #608]	; (8003e70 <UART_SetConfig+0x2e0>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d817      	bhi.n	8003c48 <UART_SetConfig+0xb8>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <UART_SetConfig+0x90>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c3d 	.word	0x08003c3d
 8003c28:	08003c43 	.word	0x08003c43
 8003c2c:	08003c37 	.word	0x08003c37
 8003c30:	2301      	movs	r3, #1
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e0b5      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c36:	2302      	movs	r3, #2
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e0b2      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e0af      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c42:	2308      	movs	r3, #8
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e0ac      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e0a9      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a88      	ldr	r2, [pc, #544]	; (8003e74 <UART_SetConfig+0x2e4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d124      	bne.n	8003ca2 <UART_SetConfig+0x112>
 8003c58:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <UART_SetConfig+0x2e0>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c64:	d011      	beq.n	8003c8a <UART_SetConfig+0xfa>
 8003c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c6a:	d817      	bhi.n	8003c9c <UART_SetConfig+0x10c>
 8003c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c70:	d011      	beq.n	8003c96 <UART_SetConfig+0x106>
 8003c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c76:	d811      	bhi.n	8003c9c <UART_SetConfig+0x10c>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <UART_SetConfig+0xf4>
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d006      	beq.n	8003c90 <UART_SetConfig+0x100>
 8003c82:	e00b      	b.n	8003c9c <UART_SetConfig+0x10c>
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e08b      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e088      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c90:	2304      	movs	r3, #4
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e085      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c96:	2308      	movs	r3, #8
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e082      	b.n	8003da2 <UART_SetConfig+0x212>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e07f      	b.n	8003da2 <UART_SetConfig+0x212>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a74      	ldr	r2, [pc, #464]	; (8003e78 <UART_SetConfig+0x2e8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d124      	bne.n	8003cf6 <UART_SetConfig+0x166>
 8003cac:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <UART_SetConfig+0x2e0>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cb8:	d011      	beq.n	8003cde <UART_SetConfig+0x14e>
 8003cba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cbe:	d817      	bhi.n	8003cf0 <UART_SetConfig+0x160>
 8003cc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cc4:	d011      	beq.n	8003cea <UART_SetConfig+0x15a>
 8003cc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cca:	d811      	bhi.n	8003cf0 <UART_SetConfig+0x160>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <UART_SetConfig+0x148>
 8003cd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cd4:	d006      	beq.n	8003ce4 <UART_SetConfig+0x154>
 8003cd6:	e00b      	b.n	8003cf0 <UART_SetConfig+0x160>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e061      	b.n	8003da2 <UART_SetConfig+0x212>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e05e      	b.n	8003da2 <UART_SetConfig+0x212>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e05b      	b.n	8003da2 <UART_SetConfig+0x212>
 8003cea:	2308      	movs	r3, #8
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e058      	b.n	8003da2 <UART_SetConfig+0x212>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e055      	b.n	8003da2 <UART_SetConfig+0x212>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a60      	ldr	r2, [pc, #384]	; (8003e7c <UART_SetConfig+0x2ec>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d124      	bne.n	8003d4a <UART_SetConfig+0x1ba>
 8003d00:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <UART_SetConfig+0x2e0>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d0c:	d011      	beq.n	8003d32 <UART_SetConfig+0x1a2>
 8003d0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0x1b4>
 8003d14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d18:	d011      	beq.n	8003d3e <UART_SetConfig+0x1ae>
 8003d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1e:	d811      	bhi.n	8003d44 <UART_SetConfig+0x1b4>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x19c>
 8003d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d28:	d006      	beq.n	8003d38 <UART_SetConfig+0x1a8>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x1b4>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e037      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d32:	2302      	movs	r3, #2
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e034      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e031      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e02e      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e02b      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a4c      	ldr	r2, [pc, #304]	; (8003e80 <UART_SetConfig+0x2f0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d124      	bne.n	8003d9e <UART_SetConfig+0x20e>
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <UART_SetConfig+0x2e0>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d60:	d011      	beq.n	8003d86 <UART_SetConfig+0x1f6>
 8003d62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d66:	d817      	bhi.n	8003d98 <UART_SetConfig+0x208>
 8003d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d6c:	d011      	beq.n	8003d92 <UART_SetConfig+0x202>
 8003d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d72:	d811      	bhi.n	8003d98 <UART_SetConfig+0x208>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <UART_SetConfig+0x1f0>
 8003d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7c:	d006      	beq.n	8003d8c <UART_SetConfig+0x1fc>
 8003d7e:	e00b      	b.n	8003d98 <UART_SetConfig+0x208>
 8003d80:	2300      	movs	r3, #0
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e00d      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d86:	2302      	movs	r3, #2
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e00a      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e007      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d92:	2308      	movs	r3, #8
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e004      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e001      	b.n	8003da2 <UART_SetConfig+0x212>
 8003d9e:	2310      	movs	r3, #16
 8003da0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003daa:	d16d      	bne.n	8003e88 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003dac:	7ffb      	ldrb	r3, [r7, #31]
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d827      	bhi.n	8003e02 <UART_SetConfig+0x272>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x228>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe fe24 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8003de0:	61b8      	str	r0, [r7, #24]
        break;
 8003de2:	e013      	b.n	8003e0c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe fe42 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003de8:	61b8      	str	r0, [r7, #24]
        break;
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <UART_SetConfig+0x2f4>)
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e00c      	b.n	8003e0c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fda3 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003df6:	61b8      	str	r0, [r7, #24]
        break;
 8003df8:	e008      	b.n	8003e0c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	61bb      	str	r3, [r7, #24]
        break;
 8003e00:	e004      	b.n	8003e0c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	77bb      	strb	r3, [r7, #30]
        break;
 8003e0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8086 	beq.w	8003f20 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	005a      	lsls	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	441a      	add	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d916      	bls.n	8003e60 <UART_SetConfig+0x2d0>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d212      	bcs.n	8003e60 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	89fa      	ldrh	r2, [r7, #14]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	e05f      	b.n	8003f20 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	77bb      	strb	r3, [r7, #30]
 8003e64:	e05c      	b.n	8003f20 <UART_SetConfig+0x390>
 8003e66:	bf00      	nop
 8003e68:	efff69f3 	.word	0xefff69f3
 8003e6c:	40013800 	.word	0x40013800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40004400 	.word	0x40004400
 8003e78:	40004800 	.word	0x40004800
 8003e7c:	40004c00 	.word	0x40004c00
 8003e80:	40005000 	.word	0x40005000
 8003e84:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d827      	bhi.n	8003ede <UART_SetConfig+0x34e>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x304>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	08003ec9 	.word	0x08003ec9
 8003ea0:	08003edf 	.word	0x08003edf
 8003ea4:	08003ecf 	.word	0x08003ecf
 8003ea8:	08003edf 	.word	0x08003edf
 8003eac:	08003edf 	.word	0x08003edf
 8003eb0:	08003edf 	.word	0x08003edf
 8003eb4:	08003ed7 	.word	0x08003ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe fdb6 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	61b8      	str	r0, [r7, #24]
        break;
 8003ebe:	e013      	b.n	8003ee8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec0:	f7fe fdd4 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003ec4:	61b8      	str	r0, [r7, #24]
        break;
 8003ec6:	e00f      	b.n	8003ee8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <UART_SetConfig+0x3a8>)
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e00c      	b.n	8003ee8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ece:	f7fe fd35 	bl	800293c <HAL_RCC_GetSysClockFreq>
 8003ed2:	61b8      	str	r0, [r7, #24]
        break;
 8003ed4:	e008      	b.n	8003ee8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eda:	61bb      	str	r3, [r7, #24]
        break;
 8003edc:	e004      	b.n	8003ee8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ee6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	085a      	lsrs	r2, r3, #1
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	441a      	add	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b0f      	cmp	r3, #15
 8003f08:	d908      	bls.n	8003f1c <UART_SetConfig+0x38c>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d204      	bcs.n	8003f1c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	e001      	b.n	8003f20 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	007a1200 	.word	0x007a1200

08003f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01a      	beq.n	8004052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403a:	d10a      	bne.n	8004052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004090:	f7fc ff42 	bl	8000f18 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d10e      	bne.n	80040c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f82d 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e023      	b.n	800410a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d10e      	bne.n	80040ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f817 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e00d      	b.n	800410a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b09c      	sub	sp, #112	; 0x70
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004122:	e0a5      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	f000 80a1 	beq.w	8004270 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fc fef3 	bl	8000f18 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <UART_WaitOnFlagUntilTimeout+0x32>
 800413e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004140:	2b00      	cmp	r3, #0
 8004142:	d13e      	bne.n	80041c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004158:	667b      	str	r3, [r7, #100]	; 0x64
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004164:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e6      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	663b      	str	r3, [r7, #96]	; 0x60
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004196:	64ba      	str	r2, [r7, #72]	; 0x48
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800419c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e5      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e067      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d04f      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041de:	d147      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800420e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	613b      	str	r3, [r7, #16]
   return(result);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	66bb      	str	r3, [r7, #104]	; 0x68
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800423c:	623a      	str	r2, [r7, #32]
 800423e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	61bb      	str	r3, [r7, #24]
   return(result);
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e010      	b.n	8004292 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69da      	ldr	r2, [r3, #28]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	f43f af4a 	beq.w	8004124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3770      	adds	r7, #112	; 0x70
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800429a:	b480      	push	{r7}
 800429c:	b095      	sub	sp, #84	; 0x54
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c0:	643b      	str	r3, [r7, #64]	; 0x40
 80042c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	2b01      	cmp	r3, #1
 800430e:	d118      	bne.n	8004342 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60bb      	str	r3, [r7, #8]
   return(result);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	613b      	str	r3, [r7, #16]
   return(result);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e6      	bne.n	8004310 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004354:	bf00      	nop
 8004356:	3754      	adds	r7, #84	; 0x54
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff fbf0 	bl	8003b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6979      	ldr	r1, [r7, #20]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	613b      	str	r3, [r7, #16]
   return(result);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e6      	bne.n	8004394 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff fbbc 	bl	8003b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043d8:	bf00      	nop
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	4d0d      	ldr	r5, [pc, #52]	; (800442c <__libc_init_array+0x38>)
 80043f8:	4c0d      	ldr	r4, [pc, #52]	; (8004430 <__libc_init_array+0x3c>)
 80043fa:	1b64      	subs	r4, r4, r5
 80043fc:	10a4      	asrs	r4, r4, #2
 80043fe:	2600      	movs	r6, #0
 8004400:	42a6      	cmp	r6, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	4d0b      	ldr	r5, [pc, #44]	; (8004434 <__libc_init_array+0x40>)
 8004406:	4c0c      	ldr	r4, [pc, #48]	; (8004438 <__libc_init_array+0x44>)
 8004408:	f000 f820 	bl	800444c <_init>
 800440c:	1b64      	subs	r4, r4, r5
 800440e:	10a4      	asrs	r4, r4, #2
 8004410:	2600      	movs	r6, #0
 8004412:	42a6      	cmp	r6, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f855 3b04 	ldr.w	r3, [r5], #4
 800441c:	4798      	blx	r3
 800441e:	3601      	adds	r6, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f855 3b04 	ldr.w	r3, [r5], #4
 8004426:	4798      	blx	r3
 8004428:	3601      	adds	r6, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	080044b8 	.word	0x080044b8
 8004430:	080044b8 	.word	0x080044b8
 8004434:	080044b8 	.word	0x080044b8
 8004438:	080044bc 	.word	0x080044bc

0800443c <memset>:
 800443c:	4402      	add	r2, r0
 800443e:	4603      	mov	r3, r0
 8004440:	4293      	cmp	r3, r2
 8004442:	d100      	bne.n	8004446 <memset+0xa>
 8004444:	4770      	bx	lr
 8004446:	f803 1b01 	strb.w	r1, [r3], #1
 800444a:	e7f9      	b.n	8004440 <memset+0x4>

0800444c <_init>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr

08004458 <_fini>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	bf00      	nop
 800445c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445e:	bc08      	pop	{r3}
 8004460:	469e      	mov	lr, r3
 8004462:	4770      	bx	lr
